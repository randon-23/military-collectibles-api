// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MilitaryCollectiblesBackend.Data;

#nullable disable

namespace MilitaryCollectiblesBackend.Migrations
{
    [DbContext(typeof(MilitaryCollectiblesDbContext))]
    [Migration("20250823121849_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.Artifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArtifactType")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Era")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Origin")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Location");

                    b.HasIndex("SeriesId");

                    b.ToTable("Artifacts", null, t =>
                        {
                            t.HasCheckConstraint("chk_ArtifactType", "ArtifactType IN ('Photograph', 'Poster', 'Document')");
                        });
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.ArtifactSeries", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriesId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeriesName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SeriesId");

                    b.ToTable("ArtifactSeries", (string)null);
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EquipmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Era")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Origin")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Location");

                    b.ToTable("Equipment", null, t =>
                        {
                            t.HasCheckConstraint("chk_EquipmentType", "EquipmentType IN ('Uniform', 'Armour', 'Inventory')");
                        });
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.Insignia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Era")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InsigniaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Origin")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("PartOfSet")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Location");

                    b.HasIndex("SeriesId");

                    b.ToTable("Insignias", null, t =>
                        {
                            t.HasCheckConstraint("chk_InsigniaType", "InsigniaType IN  ('Badge', 'Regimental Badge', 'Lapel Badge', 'Ribbon')");
                        });
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.InsigniaSeries", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriesId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeriesName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SeriesId");

                    b.ToTable("InsigniaSeries", (string)null);
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.Literature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("BindingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ISBN")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LiteratureType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ISBN")
                        .IsUnique()
                        .HasFilter("[ISBN] IS NOT NULL");

                    b.HasIndex("Location");

                    b.HasIndex("SeriesId");

                    b.ToTable("Literatures", null, t =>
                        {
                            t.HasCheckConstraint("chk_BindingType", "BindingType IN ('Paperback', 'Hardback')");

                            t.HasCheckConstraint("chk_LiteratureType", "LiteratureType IN ('Book', 'Magazine')");
                        });
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.LiteratureSeries", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriesId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeriesName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SeriesId");

                    b.ToTable("LiteratureSeries", (string)null);
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocationNotes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.MechanicalEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("CaliberSpec")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Era")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Material")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MechanicalEquipmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Origin")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VehicleModel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Location");

                    b.ToTable("MechanicalEquipment", null, t =>
                        {
                            t.HasCheckConstraint("chk_MechanicalEquipmentType", "MechanicalEquipmentType IN ('Ordinance', 'Weapon', 'Projectile', 'Vehicular')");
                        });
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.Artifact", b =>
                {
                    b.HasOne("MilitaryCollectiblesBackend.Models.Location", "LocationDetails")
                        .WithMany("Artifacts")
                        .HasForeignKey("Location")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MilitaryCollectiblesBackend.Models.ArtifactSeries", "ArtifactSeries")
                        .WithMany("Artifacts")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ArtifactSeries");

                    b.Navigation("LocationDetails");
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.Equipment", b =>
                {
                    b.HasOne("MilitaryCollectiblesBackend.Models.Location", "LocationDetails")
                        .WithMany("Equipments")
                        .HasForeignKey("Location")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LocationDetails");
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.Insignia", b =>
                {
                    b.HasOne("MilitaryCollectiblesBackend.Models.Location", "LocationDetails")
                        .WithMany("Insignias")
                        .HasForeignKey("Location")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MilitaryCollectiblesBackend.Models.InsigniaSeries", "InsigniaSeries")
                        .WithMany("Insignias")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InsigniaSeries");

                    b.Navigation("LocationDetails");
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.Literature", b =>
                {
                    b.HasOne("MilitaryCollectiblesBackend.Models.Location", "LocationDetails")
                        .WithMany("Literatures")
                        .HasForeignKey("Location")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MilitaryCollectiblesBackend.Models.LiteratureSeries", "LiteratureSeries")
                        .WithMany("Literatures")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LiteratureSeries");

                    b.Navigation("LocationDetails");
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.MechanicalEquipment", b =>
                {
                    b.HasOne("MilitaryCollectiblesBackend.Models.Location", "LocationDetails")
                        .WithMany("MechanicalEquipments")
                        .HasForeignKey("Location")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LocationDetails");
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.ArtifactSeries", b =>
                {
                    b.Navigation("Artifacts");
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.InsigniaSeries", b =>
                {
                    b.Navigation("Insignias");
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.LiteratureSeries", b =>
                {
                    b.Navigation("Literatures");
                });

            modelBuilder.Entity("MilitaryCollectiblesBackend.Models.Location", b =>
                {
                    b.Navigation("Artifacts");

                    b.Navigation("Equipments");

                    b.Navigation("Insignias");

                    b.Navigation("Literatures");

                    b.Navigation("MechanicalEquipments");
                });
#pragma warning restore 612, 618
        }
    }
}
